<?php
namespace Kkdshka\TodoList\Model;

use \PHPUnit\Framework\TestCase;
use \Phake;
use \Kkdshka\TodoList\Repository\Repository;
use \Kkdshka\ToDoList\Model\Task;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-15 at 19:38:39.
 */
class TaskManagerTest extends TestCase
{
    /**
     * @test
     * @covers Kkdshka\TodoList\Model\TaskManager::create
     */
    public function shouldCreateTask()
    {
        $repository = Phake::mock(Repository::class);
        $taskManager = new TaskManager($repository);
        
        $taskManager->create('Test subject');
        
        Phake::verify($repository)->create(new Task('Test subject'));
    }

    /**
     * @test
     * @covers Kkdshka\TodoList\Model\TaskManager::complete
     */
    public function shouldCompleteTask()
    {
        $repository = Phake::mock(Repository::class);
        $task = Phake::mock(Task::class);
        $taskManager = new TaskManager($repository);
        
        $taskManager->complete($task);
        
        Phake::verify($task)->complete();
        Phake::verify($repository)->update($task);
    }

    /**
     * @test
     * @covers Kkdshka\TodoList\Model\TaskManager::delete
     */
    public function shouldDeleteTask()
    {
        $repository = Phake::mock(Repository::class);
        $task = Phake::mock(Task::class);
        $taskManager = new TaskManager($repository);
        
        $taskManager->delete($task);
        
        Phake::verify($repository)->delete($task);
    }

    /**
     * @test
     * @covers Kkdshka\TodoList\Model\TaskManager::getAll
     */
    public function shouldGetAllTasks()
    {
        $repository = Phake::mock(Repository::class);
        $taskManager = new TaskManager($repository);
        $expectedTasks = [
            Phake::mock(Task::class),
            Phake::mock(Task::class)
        ];
        
        Phake::when($repository)->getAll()->thenReturn($expectedTasks);
        
        $tasks = $taskManager->getAll();
        
        Phake::verify($repository)->getAll();
        $this->assertEquals($expectedTasks, $tasks);
    }
}
